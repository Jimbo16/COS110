/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mycountryproject;

/**
 *
 * @author jimmy
 */
public class CountryProject extends javax.swing.JFrame {

    /**
     * Creates new form CountryProject
     */
    public CountryProject() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        subItemList = new javax.swing.JList<>();
        pictureLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        informationTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Click to See");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(599, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        System.out.println ("We are inside the 'Code Customizer' block.");
        jComboBox1.removeAllItems();
        System.out.println ("We will connect to the file with java.util.Scanner.");
        java.util.Scanner inputData = null;  // This must be declared before the try-catch block.
        try {
            inputData = new java.util.Scanner (new java.io.File("countryInformation.txt"));
        }
        catch (java.io.FileNotFoundException e)
        {
            System.out.println ("Inside the FileNotFoundException catch block.");
        }
        System.out.println ("We will pass the string into an object for processing.");
        while (inputData.hasNext())
        {
            String [ ] parts = inputData.nextLine().split("///");
            myArtifactClass = new ArtifactClass(parts [0], parts [1]);
            myArtifactClassList.add(myArtifactClass);
            System.out.println("String[] parts: " + parts[0]);
            jComboBox1.addItem(parts[0]);
        }
        System.out.println ("We will use a loop to populate the comboBox.");
        for (int index = 0; index <myArtifactClassList.size(); index++){
            jComboBox1.addItem(myArtifactClassList.get(index).getEntryForComboBox());
        }

        jSplitPane1.setBackground(new java.awt.Color(10, 100, 240));

        subItemList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        subItemList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                subItemListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(subItemList);

        jSplitPane1.setLeftComponent(jScrollPane2);
        jSplitPane1.setRightComponent(pictureLabel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
        );

        informationTextArea.setColumns(20);
        informationTextArea.setLineWrap(true);
        informationTextArea.setRows(5);
        informationTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(informationTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(104, 104, 104))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Working : The index value: " + jComboBox1.getSelectedIndex());
        System.out.println("the text is: " + myArtifactClassList.get(jComboBox1.getSelectedIndex()).getEntryForComboBox());
        System.out.println("The sub items: " + myArtifactClassList.get(jComboBox1.getSelectedIndex()).getInformationText());
        subItemTextArray = new String[myArtifactClassList.get(jComboBox1.getSelectedIndex()).getListPartsLength()];
        String[] newWorkingSubItemListArray = new String[myArtifactClassList.get(jComboBox1.getSelectedIndex()).getListPartsLength()];
        for (int index = 0; index < myArtifactClassList.get(jComboBox1.getSelectedIndex()).getListPartsLength(); index++) {
            newWorkingSubItemListArray[index] = myArtifactClassList.get(jComboBox1.getSelectedIndex()).getListHeader(index);
            subItemTextArray[index] = myArtifactClassList.get(jComboBox1.getSelectedIndex()).getListHeaderAssociatedText(index);
            
        }

        subItemList.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                return newWorkingSubItemListArray.length;
            }

            public String getElementAt(int i) {
                return newWorkingSubItemListArray[i];
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void subItemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_subItemListValueChanged
        // TODO add your handling code here:
        javax.swing.JList localList = (javax.swing.JList) evt.getSource();
        System.out.println("localList.getSelectedIndex(): " + localList.getSelectedIndex());
        System.out.println("Looking for images folders");
        String rootDir = System.getenv("SystemDrive");
        System.out.println("The root directory or folder " + rootDir);
        System.out.println("homepath:  " + System.getenv("HOMEPATH"));
        System.out.println("EXEC_DIR:  " + System.getenv("EXEC_DIR"));

        System.out.println("Now to obtain a list of files.");
        java.io.File[] filesInDirectory = new java.io.File(System.getenv("EXEC_DIR")).listFiles();
        for (java.io.File ff : filesInDirectory) {
            System.out.println("Exploring file or folder:  " + ff);
            System.out.println("The path information:  " + ff.getPath());
            if (ff.isDirectory()) {
                System.out.println("Found a directory:  " + ff);
                if (ff.getName().equals("images")) {
                    System.out.println("We found the image folder.");
                    java.io.File[] filesInImageDirectory = new java.io.File(ff.getName().toString()).listFiles();
                    System.out.println("We need to find the proper image.");
                    for (java.io.File fff : filesInImageDirectory) {
                        System.out.println("fff.getName)() " + fff.getName());
                        if (fff.getName().contains(localList.getSelectedValue().toString())) {
                            System.out.println("localList.getSelectedValue().toString() has " + localList.getSelectedValue().toString());
                            System.out.println("The selected image file exists:  " + fff.getName());
                            try {
                                java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(new java.io.File(fff.getAbsolutePath()));
                                int newHeight;
                                int newWidth;
                                if (image.getHeight() < 300) {
                                    newHeight = image.getHeight();
                                } else {
                                    newHeight = 400;
                                }
                                if (image.getWidth() < 300) {
                                    newWidth = image.getWidth();
                                } else {
                                    newWidth = 400;
                                }
                                java.awt.Image tempImage = image.getScaledInstance(newWidth, newHeight, java.awt.Image.SCALE_SMOOTH);
                                icon = new javax.swing.ImageIcon(tempImage);
                                pictureLabel.setIcon(icon);

                                informationTextArea.setText("");
                                System.out.println("Thetextis" + subItemTextArray[localList.getSelectedIndex()]);
                                informationTextArea.append(subItemTextArray[localList.getSelectedIndex()]);

                            } catch (java.io.IOException ioe) {
                                System.out.println("Image: From the ioe catch block.");
                            }

                        }
                    }
                }
                if (ff.getName().equals("audioFiles")) {
                    System.out.println("We found the audioFiles folder");
                    java.io.File[] filesInImageDirectory = new java.io.File(ff.getName().toString()).listFiles();
                    System.out.println("We need to find the proper audio file.");
                    for (java.io.File fff : filesInImageDirectory) {
                        System.out.println("Audio fff.getName)() " + fff.getName());
                        if (fff.getName().contains(localList.getSelectedValue().toString())) {
                            System.out.println("Audio localList.getSelectedValue().toString() has " + localList.getSelectedValue().toString());
                            System.out.println("The selected audio file exists:  " + fff.getName());

                            try {
                                // static Mixer getMixer(Mixer.info info);
                                System.out.println("Now to connect to the audio file.");
                                javax.sound.sampled.AudioInputStream audioStream = javax.sound.sampled.AudioSystem.getAudioInputStream(new java.io.File(fff.getAbsolutePath()));
                                System.out.println("Acquire audio format and create a DataLine.Info object");
                                javax.sound.sampled.AudioFormat format = audioStream.getFormat();
                                javax.sound.sampled.DataLine.Info info = new javax.sound.sampled.DataLine.Info(javax.sound.sampled.SourceDataLine.class, format);
                                System.out.println("Now to define the audio line.");  // The next line does not work for the flag.
                                // if (javax.sound.sampled.SourceDataLine.class.isAssignableFrom(info.getLineClass())) {
                                javax.sound.sampled.SourceDataLine audioLine = (javax.sound.sampled.SourceDataLine) javax.sound.sampled.AudioSystem.getLine(info);
                                System.out.println("Open and start the audio line.");
                                audioLine.open(format);
                                audioLine.start();
                                System.out.println("Playback has started.  It will be done with a loop.");
                                byte[] bytesBuffer = new byte[4096];
                                int bytesRead = -1;
                                while ((bytesRead = audioStream.read(bytesBuffer)) != -1) {
                                    audioLine.write(bytesBuffer, 0, bytesRead);
                                }
                                System.out.println("Closing and releaseing the resources.");
                                audioLine.drain();
                                audioLine.close();
                                audioStream.close();
                                //}
                                //else {
                                //    System.out.println ("Not supported.");
                                //}

                            } catch (javax.sound.sampled.UnsupportedAudioFileException uafe) {
                                System.out.println("The specified audio file is not supported.");
                            } catch (javax.sound.sampled.LineUnavailableException lue) {
                                System.out.println("Audio line for playing back is unavailable.");
                            } catch (java.io.IOException ioe) {
                                System.out.println("Error playing the audio file.");
                            }
                        }
                    }

                }
            }
        }

    }//GEN-LAST:event_subItemListValueChanged

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CountryProject







.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CountryProject







.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CountryProject







.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CountryProject







.class  


.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CountryProject().setVisible(true);
            }
        });
    }

    ArtifactClass myArtifactClass;
    java.util.ArrayList<ArtifactClass> myArtifactClassList = new java.util.ArrayList<>();
    private javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel<>();
    javax.swing.ImageIcon icon;
    String[] subItemTextArray;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea informationTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JList<String> subItemList;
    // End of variables declaration//GEN-END:variables
}
